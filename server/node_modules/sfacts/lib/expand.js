'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _levelgraph = require('levelgraph');

var _levelgraph2 = _interopRequireDefault(_levelgraph);

var _levelSublevel = require('level-sublevel');

var _levelSublevel2 = _interopRequireDefault(_levelSublevel);

var _concepts = require('./concepts');

var _concepts2 = _interopRequireDefault(_concepts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// We wrap the DB with extra functions.
const expand = function expand(db, level) {
  const createUserDB = function createUserDB(dbName) {
    // With Hooks
    const sub = (0, _levelSublevel2.default)(level);
    const graphLevel = sub.sublevel(dbName);
    graphLevel.db = level.db;
    graphLevel.approximateSize = level.db.approximateSize.bind(level.db);

    const graph = (0, _levelgraph2.default)(graphLevel);

    return expand(graph, graphLevel);
  };

  const createUserDBWithData = function createUserDBWithData(dbName, files, cb) {
    const sub = (0, _levelSublevel2.default)(level);
    const graphLevel = sub.sublevel(dbName);
    graphLevel.db = level.db;
    graphLevel.approximateSize = level.db.approximateSize.bind(level.db);

    const graph = (0, _levelgraph2.default)(graphLevel);

    _concepts2.default.readFiles(files, graph, (err, conceptMap) => {
      cb(err, expand(graph, graphLevel));
    });
  };

  // This adds a file to an existing DB
  const loadFiles = function loadFiles(files, cb) {
    _concepts2.default.readFiles(files, db, cb);
  };

  const conceptToList = function conceptToList(term, depth, cb) {
    if (_lodash2.default.isFunction(depth)) {
      cb = depth;
      depth = 0;
    }

    if (depth === 10) {
      return cb('DEPTH', null);
    }

    db.search([{ subject: term, predicate: 'example', object: db.v('concepts') }], (err, results) => {
      if (err) {
        console.log(err);
      }
      const itor = (itemx, next) => {
        // db.get({subject: itemx , predicate: 'isa', object: 'concept' },
        db.search([{ subject: itemx, predicate: 'isa', object: db.v('concepts') }, { subject: db.v('concepts'), predicate: 'isa', object: 'concept' }, { subject: itemx, predicate: 'example', object: db.v('term') }], (err, res2) => {
          if (err) {
            console.log(err);
          }
          if (_lodash2.default.isEmpty(res2)) {
            next(null, itemx);
          } else if (itemx !== term) {
            conceptToList(itemx, depth + 1, next);
          } else {
            next(null, itemx);
          }
        });
      };

      const list = results.map(item => item.concepts);

      _async2.default.map(list, itor, (err, res) => {
        if (err) {
          console.log(err);
        }
        const resultSet = _lodash2.default.uniq(_lodash2.default.flatten(res));
        cb(null, resultSet);
      });
    });
  };

  const findParentConcepts = function findParentConcepts(term, cb) {
    db.search([{ subject: term, predicate: 'isa', object: db.v('concepts') }], (err, results) => {
      if (err) {
        console.log(err);
      }
      if (results.length !== 0) {
        const cl = results.map(item => item.concepts);
        cb(null, cl);
      } else {
        cb(null, []);
      }
    });
  };

  return {
    conceptToList,
    createUserDB,
    createUserDBWithData,
    db,
    findParentConcepts,
    level,
    loadFiles
  };
};

exports.default = expand;