{
  "_args": [
    [
      {
        "raw": "roman-numerals@^0.3.2",
        "scope": null,
        "escapedName": "roman-numerals",
        "name": "roman-numerals",
        "rawSpec": "^0.3.2",
        "spec": ">=0.3.2 <0.4.0",
        "type": "range"
      },
      "D:\\JavaScriptWorkSpace\\SuperScriptWork\\chatbot\\server\\node_modules\\superscript"
    ]
  ],
  "_from": "roman-numerals@>=0.3.2 <0.4.0",
  "_id": "roman-numerals@0.3.2",
  "_inCache": true,
  "_location": "/roman-numerals",
  "_npmUser": {
    "name": "joshleaves",
    "email": "josh.guthrie@gmail.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "roman-numerals@^0.3.2",
    "scope": null,
    "escapedName": "roman-numerals",
    "name": "roman-numerals",
    "rawSpec": "^0.3.2",
    "spec": ">=0.3.2 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/superscript"
  ],
  "_resolved": "https://registry.npmjs.org/roman-numerals/-/roman-numerals-0.3.2.tgz",
  "_shasum": "907ddf90c64e1b5dce8ed5e8fb0718318f2f26e6",
  "_shrinkwrap": null,
  "_spec": "roman-numerals@^0.3.2",
  "_where": "D:\\JavaScriptWorkSpace\\SuperScriptWork\\chatbot\\server\\node_modules\\superscript",
  "author": {
    "name": "Arnaud 'red' Rouyer"
  },
  "dependencies": {},
  "description": "Roman numerals conversion module",
  "devDependencies": {
    "mocha": "~1.12.0"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "907ddf90c64e1b5dce8ed5e8fb0718318f2f26e6",
    "tarball": "https://registry.npmjs.org/roman-numerals/-/roman-numerals-0.3.2.tgz"
  },
  "keywords": [
    "roman",
    "numerals",
    "conversion"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "joshleaves",
      "email": "josh.guthrie@gmail.com"
    }
  ],
  "name": "roman-numerals",
  "optionalDependencies": {},
  "readme": "# roman-numerals #\n## Installation ##\nUsing git:\n\n    $ git clone git@github.com:joshleaves/roman-numerals.git\n\n## Usage ##\n\n### roman-numerals.toArabic(roman) ###\ntoArabic() takes a roman number (as a string literal or a string object) and returns a number with the arabic equivalent.\n\n    var toArabic = require('roman-numerals').toArabic;\n    [ 'XLII', new String('XLII') ].forEach(function (x, i) {\n        console.log('%d: %s', i, toArabic(x));\n    });\nWill output:\n\n    0: 42\n    1: 42\n\ntoArabic() will throw a TypeError when passed a non-string variable and will throw an Error when passed an invalid roman number. Acceptable strings are also `\"nulla\"` and `\"\"` (that's empty string) which will both return 0.\n\n### roman-numerals.toRoman(arabic) ###\ntoRoman() takes an arabic number (as a number literal, a number object, a stringed literal number or a stringed object number) and returns a string with the roman equivalent.\n\n    var toRoman = require('roman-numerals').toRoman;\n    [ 42, new Number(42), '42', new String('42')].forEach(function (x, i) {\n        console.log('%d: %s', i, toRoman(x));\n    });\nWill output:\n\n    0: XLII\n    1: XLII\n    2: XLII\n    3: XLII\n\ntoRoman() will throw a TypeError when passed a non-number variable or NaN and will throw an Error when passed a number under 0 or over 3999.\n\n## Tests ##\nUnit tests are done using [mocha](https://github.com/visionmedia/mocha/). To run the tests on your machine, install mocha using npm and run `make test` or `npm test`.\n\n    $ npm install --dev\n    $ make test\n\nYou can also use `make nyan` for something new.\n",
  "readmeFilename": "README.md",
  "repository": "",
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.2"
}
